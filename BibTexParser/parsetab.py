
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'bibfileAT COMMA COMMENT EQUALS HASH JUNK LBRACE LPAREN NAME NEWLINE NUMBER QUOTE RBRACE RPAREN STRING WHITESPACE bibfile : entries  entries : entry NEWLINE entries\n                | entry\n     entry : AT NAME LBRACE key COMMA fields RBRACE  key : NAME\n            | NUMBER\n     fields : field COMMA fields \n\t\t\t   | field\t\t\n\t field : NAME EQUALS LBRACE value RBRACE\n     value : NUMBER\n              | STRING\n              | NAME\n    '
    
_lr_action_items = {'LBRACE':([5,16,],[7,19,]),'NAME':([1,7,12,18,19,],[5,9,13,13,24,]),'NEWLINE':([3,17,],[6,-4,]),'NUMBER':([7,19,],[10,21,]),'RBRACE':([14,15,20,21,22,23,24,25,],[17,-8,-7,-10,25,-11,-12,-9,]),'EQUALS':([13,],[16,]),'COMMA':([9,10,11,15,25,],[-5,-6,12,18,-9,]),'AT':([0,6,],[1,1,]),'STRING':([19,],[23,]),'$end':([2,3,4,8,17,],[-1,-3,0,-2,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'fields':([12,18,],[14,20,]),'value':([19,],[22,]),'field':([12,18,],[15,15,]),'key':([7,],[11,]),'entries':([0,6,],[2,8,]),'entry':([0,6,],[3,3,]),'bibfile':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> bibfile","S'",1,None,None,None),
  ('bibfile -> entries','bibfile',1,'p_bibfile','bib_parser.py',13),
  ('entries -> entry NEWLINE entries','entries',3,'p_entries','bib_parser.py',17),
  ('entries -> entry','entries',1,'p_entries','bib_parser.py',18),
  ('entry -> AT NAME LBRACE key COMMA fields RBRACE','entry',7,'p_entry','bib_parser.py',26),
  ('key -> NAME','key',1,'p_key','bib_parser.py',44),
  ('key -> NUMBER','key',1,'p_key','bib_parser.py',45),
  ('fields -> field COMMA fields','fields',3,'p_fields','bib_parser.py',50),
  ('fields -> field','fields',1,'p_fields','bib_parser.py',51),
  ('field -> NAME EQUALS LBRACE value RBRACE','field',5,'p_field','bib_parser.py',59),
  ('value -> NUMBER','value',1,'p_value','bib_parser.py',65),
  ('value -> STRING','value',1,'p_value','bib_parser.py',66),
  ('value -> NAME','value',1,'p_value','bib_parser.py',67),
]
