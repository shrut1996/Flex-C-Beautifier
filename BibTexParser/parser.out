Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    JUNK
    HASH
    QUOTE
    WHITESPACE
    LPAREN
    RPAREN

Grammar

Rule 0     S' -> bibfile
Rule 1     bibfile -> entries
Rule 2     entries -> entry NEWLINE entries
Rule 3     entries -> entry
Rule 4     entry -> AT NAME LBRACE key COMMA fields RBRACE
Rule 5     key -> NAME
Rule 6     key -> NUMBER
Rule 7     fields -> field COMMA fields
Rule 8     fields -> field
Rule 9     field -> NAME EQUALS LBRACE value RBRACE
Rule 10    value -> NUMBER
Rule 11    value -> STRING
Rule 12    value -> NAME

Terminals, with rules where they appear

AT                   : 4
COMMA                : 4 7
COMMENT              : 
EQUALS               : 9
HASH                 : 
JUNK                 : 
LBRACE               : 4 9
LPAREN               : 
NAME                 : 4 5 9 12
NEWLINE              : 2
NUMBER               : 6 10
QUOTE                : 
RBRACE               : 4 9
RPAREN               : 
STRING               : 11
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

bibfile              : 0
entries              : 1 2
entry                : 2 3
field                : 7 8
fields               : 4 7
key                  : 4
value                : 9

Parsing method: LALR

state 0

    (0) S' -> . bibfile
    (1) bibfile -> . entries
    (2) entries -> . entry NEWLINE entries
    (3) entries -> . entry
    (4) entry -> . AT NAME LBRACE key COMMA fields RBRACE

    AT              shift and go to state 1

    entry                          shift and go to state 3
    bibfile                        shift and go to state 4
    entries                        shift and go to state 2

state 1

    (4) entry -> AT . NAME LBRACE key COMMA fields RBRACE

    NAME            shift and go to state 5


state 2

    (1) bibfile -> entries .

    $end            reduce using rule 1 (bibfile -> entries .)


state 3

    (2) entries -> entry . NEWLINE entries
    (3) entries -> entry .

    NEWLINE         shift and go to state 6
    $end            reduce using rule 3 (entries -> entry .)


state 4

    (0) S' -> bibfile .



state 5

    (4) entry -> AT NAME . LBRACE key COMMA fields RBRACE

    LBRACE          shift and go to state 7


state 6

    (2) entries -> entry NEWLINE . entries
    (2) entries -> . entry NEWLINE entries
    (3) entries -> . entry
    (4) entry -> . AT NAME LBRACE key COMMA fields RBRACE

    AT              shift and go to state 1

    entry                          shift and go to state 3
    entries                        shift and go to state 8

state 7

    (4) entry -> AT NAME LBRACE . key COMMA fields RBRACE
    (5) key -> . NAME
    (6) key -> . NUMBER

    NAME            shift and go to state 9
    NUMBER          shift and go to state 10

    key                            shift and go to state 11

state 8

    (2) entries -> entry NEWLINE entries .

    $end            reduce using rule 2 (entries -> entry NEWLINE entries .)


state 9

    (5) key -> NAME .

    COMMA           reduce using rule 5 (key -> NAME .)


state 10

    (6) key -> NUMBER .

    COMMA           reduce using rule 6 (key -> NUMBER .)


state 11

    (4) entry -> AT NAME LBRACE key . COMMA fields RBRACE

    COMMA           shift and go to state 12


state 12

    (4) entry -> AT NAME LBRACE key COMMA . fields RBRACE
    (7) fields -> . field COMMA fields
    (8) fields -> . field
    (9) field -> . NAME EQUALS LBRACE value RBRACE

    NAME            shift and go to state 13

    fields                         shift and go to state 14
    field                          shift and go to state 15

state 13

    (9) field -> NAME . EQUALS LBRACE value RBRACE

    EQUALS          shift and go to state 16


state 14

    (4) entry -> AT NAME LBRACE key COMMA fields . RBRACE

    RBRACE          shift and go to state 17


state 15

    (7) fields -> field . COMMA fields
    (8) fields -> field .

    COMMA           shift and go to state 18
    RBRACE          reduce using rule 8 (fields -> field .)


state 16

    (9) field -> NAME EQUALS . LBRACE value RBRACE

    LBRACE          shift and go to state 19


state 17

    (4) entry -> AT NAME LBRACE key COMMA fields RBRACE .

    NEWLINE         reduce using rule 4 (entry -> AT NAME LBRACE key COMMA fields RBRACE .)
    $end            reduce using rule 4 (entry -> AT NAME LBRACE key COMMA fields RBRACE .)


state 18

    (7) fields -> field COMMA . fields
    (7) fields -> . field COMMA fields
    (8) fields -> . field
    (9) field -> . NAME EQUALS LBRACE value RBRACE

    NAME            shift and go to state 13

    field                          shift and go to state 15
    fields                         shift and go to state 20

state 19

    (9) field -> NAME EQUALS LBRACE . value RBRACE
    (10) value -> . NUMBER
    (11) value -> . STRING
    (12) value -> . NAME

    NUMBER          shift and go to state 21
    STRING          shift and go to state 23
    NAME            shift and go to state 24

    value                          shift and go to state 22

state 20

    (7) fields -> field COMMA fields .

    RBRACE          reduce using rule 7 (fields -> field COMMA fields .)


state 21

    (10) value -> NUMBER .

    RBRACE          reduce using rule 10 (value -> NUMBER .)


state 22

    (9) field -> NAME EQUALS LBRACE value . RBRACE

    RBRACE          shift and go to state 25


state 23

    (11) value -> STRING .

    RBRACE          reduce using rule 11 (value -> STRING .)


state 24

    (12) value -> NAME .

    RBRACE          reduce using rule 12 (value -> NAME .)


state 25

    (9) field -> NAME EQUALS LBRACE value RBRACE .

    COMMA           reduce using rule 9 (field -> NAME EQUALS LBRACE value RBRACE .)
    RBRACE          reduce using rule 9 (field -> NAME EQUALS LBRACE value RBRACE .)

